generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id                String           @id @default(cuid()) @map(name: "id")
  name              String
  email             String           @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  role              Role             @default(user)
  account           Account[]
  wishlist          Wishlist?
  order             Order[]
  cart              Cart?
  reviews           Review[]
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?          @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  text      String
  productId String
  userId    String
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId Int
  productId  String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id       Int            @id @default(autoincrement())
  userId   String         @unique
  user     User           @relation(fields: [userId], references: [id])
  products WishlistItem[]
}

model Product {
  id            String         @id @default(uuid())
  addedAt       DateTime       @default(now())
  slug          String         @unique
  price         Float
  title         String
  quantity      Int
  description   String
  sku           Int            @unique
  colors        String[]
  sizes         String[]
  images        Image[]
  categories    String[]
  isFeatured    Boolean
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  Review        Review[]
  OrderItem     OrderItem[]
}

model Image {
  id        Int     @id @default(autoincrement())
  imageSrc  String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  color     String
  size      String
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  color     String
  size      String
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id                String          @id @default(uuid())
  ref               String          @unique
  userId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?
  user              User            @relation(fields: [userId], references: [id])
  amount            Float
  isPaid            Boolean         @default(false)
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
  orderItems        OrderItem[]
}

model Cart {
  id        String     @id @default(uuid())
  total     Float
  quantity  Int
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model ShippingAddress {
  id            String  @id @default(uuid())
  streetAddress String
  city          String
  state         String
  country       String
  zipCode       String
  email         String  @unique
  fullName      String
  orders        Order[]
  user          User?
  userId        String?
}

model OrderGoal {
  id   Int @id @default(autoincrement())
  goal Int
}

model VerificationToken {
  id         String   @id @default(cuid())
  token      String   @unique
  email      String
  expires_at DateTime

  @@unique([email, token])
}

model ResetToken {
  id         String   @id @default(cuid())
  token      String   @unique
  email      String
  expires_at DateTime

  @@unique([email, token])
}